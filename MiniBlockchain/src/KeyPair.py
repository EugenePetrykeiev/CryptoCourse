import random
from datetime import datetime
from ecdsa.util import PRNG
from ecdsa import SECP256k1, SigningKey
from hashlib import sha256


class PublicKey:

    def __init__(self, key):
        self.key = key


class PrivateKey:

    def __init__(self, key):
        self.key = key


class KeyPair:

    def __init__(self, public_key, private_key):
        if type(private_key) == str and type(public_key) == str:
            private_key = bytes.fromhex(private_key)
            public_key = bytes.fromhex(public_key)
        elif type(private_key) == bytes and type(public_key) == bytes:
            private_key = private_key
            public_key = public_key
        else:
            raise Exception(TypeError)
        self.publicKey = PublicKey(public_key)
        self.privateKey = PrivateKey(private_key)

    @staticmethod
    def genKeyPair() -> object:
        """
        Cryptographically secure pseudorandom number generator used for seed.

        Keys generated by ECDSA (SECP256k1 curve)

        Results will give in PEM files encoding into *.pem (BASE64) and hex values as strings

        """
        sys_random = random.SystemRandom(datetime.now())
        random_seed = sys_random.getrandbits(256)
        random_seed = bytes(hex(random_seed)[2:], 'utf-8')
        random_seed = PRNG(random_seed)
        sk = SigningKey.generate(curve=SECP256k1, entropy=random_seed, hashfunc=sha256)
        vk = sk.verifying_key
        return KeyPair(PublicKey(vk.to_string()).key, PrivateKey(sk.to_string()).key)

    def toString(self) -> tuple:
        return self.privateKey.key, self.publicKey.key

    def printKeyPair(self) -> None:
        print('Private key: ', self.privateKey.key)
        print('Public key: ', self.publicKey.key)
